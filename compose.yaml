services:
###> doctrine/doctrine-bundle ###
  database:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-choven}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-choven}", "-U", "${POSTGRES_USER:-postgres}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - choven_net

  mailer:
    image: axllent/mailpit
    container_name: mailpit
    ports:
      - "1025:1025"
      - "8025:8025"
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    restart: unless-stopped
    networks:
      - choven_net

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - choven_net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - choven_net

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: ["CMD", "cub", "kafka-ready", "-b", "kafka:9092", "1", "20"]
      interval: 15s
      timeout: 30s
      retries: 10
      start_period: 60s
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 18000
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 18000
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_BYTES: 1073741824
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - choven_net

  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-setup
    restart: "no"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - choven_net
    command: >
      bash -c "
      echo 'Waiting for Kafka to be ready...' &&
      cub kafka-ready -b kafka:9092 1 60 &&
      echo 'Creating topic orders...' &&
      kafka-topics --create --topic orders --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:9092 &&
      echo 'Creating topic registrations...' &&
      kafka-topics --create --topic registrations --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:9092 &&
      echo 'Topics created successfully. Kafka setup completed.'
      "

  php:
    container_name: php
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - .:/var/www
    working_dir: /var/www
    command: sh -c "
      mkdir -p var/cache var/log public/assets &&
      chown -R www-data:www-data var public &&
      setfacl -R -m u:www-data:rwX -m u:root:rwX var public 2>/dev/null || chmod -R 775 var public &&
      setfacl -dR -m u:www-data:rwX -m u:root:rwX var public 2>/dev/null || true &&
      php-fpm
      "
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV:-prod}
      - APP_DEBUG=${APP_DEBUG:-0}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@database:5432/${POSTGRES_DB:-choven}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - choven_net

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - .:/var/www:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
    networks:
      - choven_net

  consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: consumer
    restart: unless-stopped
    working_dir: /var/www
    user: www-data
    depends_on:
      kafka:
        condition: service_healthy
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV:-prod}
      - APP_DEBUG=${APP_DEBUG:-0}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@database:5432/${POSTGRES_DB:-choven}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: sh -c "sleep 60 && php bin/console app:kafka:consume"
    volumes:
      - .:/var/www
    networks:
      - choven_net
  
  cron:
    build:
      context: .
      dockerfile: Dockerfile.cron
    container_name: cron
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV:-prod}
      - APP_DEBUG=${APP_DEBUG:-0}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@database:5432/${POSTGRES_DB:-choven}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - .:/var/www
    networks:
      - choven_net

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local

networks:
  choven_net:
    driver: bridge