services:
###> doctrine/doctrine-bundle ###
  database:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
    ports:
      - "5432:5432"
    networks:
      - choven_net

  mailer:
    image: axllent/mailpit
    container_name: mailpit
    ports:
      - "1025:1025"
      - "8025:8025"
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    networks:
      - choven_net

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - "${REDIS_DATA_PATH}:/data/redis"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - choven_net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - choven_net

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: ["CMD", "cub", "kafka-ready", "-b", "kafka:9092", "1", "20"]
      interval: 10s
      timeout: 30s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - choven_net
  
  #Пыха
  php:
    container_name: php
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/var/www
    command: sh -c "chown -R www-data:www-data /var/www/var && php-fpm"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-setup:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV:-prod}
      - APP_DEBUG=${APP_DEBUG:-0}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - choven_net
  
  # Nginx веб-сервер
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - .:/var/www
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
    networks:
      - choven_net
  consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: consumer
    restart: unless-stopped
    depends_on:
      kafka-setup:
        condition: service_healthy
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV:-prod}
      - APP_DEBUG=${APP_DEBUG:-0}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: php bin/console app:kafka:consume-orders
    volumes:
      - .:/var/www
    networks:
      - choven_net
  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - choven_net
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        cub kafka-ready -b kafka:9092 1 60 &&
        echo 'Kafka is ready! Creating topic...' &&
        kafka-topics --create --topic orders --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:9092 &&
        echo 'Topic created successfully. Service is ready.' &&
        tail -f /dev/null
      "
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list | grep -q 'orders'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  database_data:

networks:
  choven_net:
    driver: bridge
  